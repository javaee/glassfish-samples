<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<!-- Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 $Id$ -->

<!-- This file defines various Java EE SDK specific tasks. 
     This file is not meant to be included in a project directly. 
     @Author Inderjeet Singh -->
<project name="app-server-ant" default="compile">

  <!-- Define sensible defaults for app-server properties -->
  <property file="${ant.file.app-server-ant}/../app-server.properties"/>
  <condition property="db.home" value="${javaee.home}/javadb">
      <available file="${javaee.home}/javadb"/>
  </condition>
  <property name="db.home" value="${javaee.home}/../javadb"/>
  <property name="db.root" value="${db.home}"/>
  
  <!-- This file contains common ant commands that are specific to Java EE
     SDK. To port this application to a different app-server, you will 
     need to write an equivalent file. 
     You must include main.xml before including this file -->

  <target name="tools" depends="check">
     <condition property="javaee-script-suffix" value=".bat">
        <os family="windows"/>
     </condition>
     <condition property="javaee-script-suffix" value="">
        <not>
           <os family="windows"/>
        </not>
     </condition>
     <condition property="path.separator" value=";">
        <os family="windows"/>
     </condition>
     <condition property="path.separator" value=":">
        <not>
           <os family="windows"/>
        </not>
     </condition>
     <condition property="space.enclosure" value="&quot;">
       <os family="windows"/>
     </condition>
     <condition property="space.enclosure" value="">
       <not>
         <os family="windows"/>
       </not>
     </condition>
     
    <!-- setup properties for various Java EE tools -->
    <property name="asadmin" value="${javaee.home}/bin/asadmin${javaee-script-suffix}"/>
    <property name="appclient" value="${javaee.home}/bin/appclient${javaee-script-suffix}"/>
    <property name="wsimport" value="${javaee.home}/bin/wsimport${javaee-script-suffix}"/>
  </target>

  <!-- Construct Java EE classpath -->
  <path id="javaee.classpath">
    <fileset dir="${javaee.home}">
      <include name="modules/*.jar"/>
      <include name="modules/endorsed/*.jar"/>
    </fileset>                              
    <pathelement location="${javaee.home}/lib/javaee.jar"/>
    <pathelement location="${javaee.home}/lib/jsf-api.jar"/>
    <pathelement location="${javaee.home}/lib/jsf-impl.jar"/>
    <pathelement location="${javaee.home}/lib/appserv-jstl.jar"/>
    <pathelement location="${javaee.home}/lib/commons-logging.jar"/>
    <pathelement location="${javaee.home}/lib/webservices-rt.jar"/>
    <pathelement location="${javaee.home}/lib/webservices-tools.jar"/>
    <pathelement location="${javaee.home}/bin"/>
  </path>

  <property name="javaee.endorsed.dir" location="${javaee.home}/modules/endorsed"/>

  <!-- Construct path to be used for Java DB -->
  <path id="db.classpath">
    <fileset dir="${db.root}/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  
  <target name="bpp-run-app-client" depends="tools">
    <echo message="running application client container."/>
    <exec executable="${appclient}">
        <arg line=" -client '${app-client.jar}'"/>
   </exec>
  </target>

  <target name="bpp-run-secure-app-client" depends="tools">
    <echo message="running application client container."/>
    <exec executable="${appclient}">
        <arg line=" -client '${app-client.jar}'"/>
	<arg line="-name ${app-client.name}"/>
	<arg line="-textauth"/>
	<arg line="-user ${file.realm.user.id}"/>
	<arg line="-password ${file.realm.user.password}"/>
	<arg line="-xml '${javaee.domaindir}/config/sun-acc.xml'"/>
	<arg line="${appclient.application.args}"/>
   </exec>
  </target>

  <target name="start-domain" depends="tools"
    description="starts application server default domain">
    <echo message="Starting default domain for ${javaee.home}"/>
    <exec executable="${asadmin}" failonerror="true">
        <arg line=" start-domain"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
   </exec>
   <waitfor>
        <http url="http://${javaee.server.name}:${javaee.server.port}"/>
   </waitfor>
  </target>

  <target name="stop-domain" depends="tools"
    description="stops application server default domain">
    <echo message="Stopping default domain for ${javaee.home}"/>
    <exec executable="${asadmin}" failonerror="true">
        <arg line=" stop-domain"/>
   </exec>
  </target>

  <target name="set-perm-size" depends="tools"
    description="sets MaxPermSize for the default domain">
    <echo message="Setting MaxPermSize"/>
    <antcall target="start-domain"/>
    <exec executable="${asadmin}" failonerror="false">
        <arg line=" create-jvm-options"/>
        <arg line=" --target server"/>
        <arg line=" -- -XX\:MaxPermSize=128m"/>
    </exec>
    <antcall target="stop-domain"/>
  </target>


  <target name="keygen-common" depends="tools"
    description="create file-realm user">

    <echo message="Generating key for user ${app.user} in server."/>

    <!-- generate temporary password file -->
    <property name="user.password.file" value="asadminuserpassword.txt"/>
    <delete file="${user.password.file}" failonerror="false"/>
    <loadproperties srcFile="${javaee.server.passwordfile}"/>

    <condition property="app.password" value="${app.user}">
        <not>
            <isset property="app.password"/>
        </not>
    </condition>

    <!-- do not format the following echo which is intentional -->
    <echo file="${user.password.file}" append="false">AS_ADMIN_USERPASSWORD=${app.password}
AS_ADMIN_PASSWORD=${AS_ADMIN_PASSWORD}</echo>

    <exec executable="${asadmin}">
        <arg line=" create-file-user"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${user.password.file}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --groups ${app.groups}"/>
        <arg line=" ${app.user}"/>
   </exec>
   <delete file="${user.password.file}" failonerror="false"/>
  </target>


  <target name="keydel-common" depends="tools"
    description="delete file-realm user">
    <echo message="Deleting key for user ${app.user} in server."/>
    <exec executable="${asadmin}">
        <arg line=" delete-file-user"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" ${app.user}"/>
   </exec>
  </target>

  <target name="start-db" depends="tools" description="starts the databse server." >
    <exec executable="${asadmin}" failonerror="${failonerror}" dir="${javaee.home}">
        <arg line=" start-database"/>
        <arg line=" --dbhost=${javaee.server.name} --dbport=${db.port} --dbhome=${db.home}"/>
    </exec>
  </target>
  
  <target name="stop-db" depends="tools" description="stops the database server." >
    <exec executable="${asadmin}" failonerror="${failonerror}">
        <arg line=" stop-database"/>
        <arg line=" --dbhost=${javaee.server.name} --dbport=${db.port}" />
    </exec> 
  </target>

 <target name="create-jdbc-connection-pool" depends="tools" 
    description="creates jdbc connection pool">
    <fail unless="db.sid" message="The property db.sid must be set before invoking this target. Otherwise there is no database to use."/>
    <fail unless="pool.name" message="The property pool.name must be set before invoking this target. Otherwise there is no pool to use with the jdbc resource."/>
    <exec executable="${asadmin}">
        <arg line=" create-jdbc-connection-pool"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --datasourceclassname ${db.datasource}" />
        <arg line=" --restype javax.sql.XADataSource " />
        <arg line=" --property portNumber=${db.port}:serverName=${javaee.server.name}:User=${db.user}:Password=${db.password}:databaseName=${db.sid}" />
        <arg line=" ${pool.name} " />
    </exec> 
 </target>
 
  <target name="create-jdbc-resource"  depends="tools"
    description="creates jdbc resource">
    <fail unless="pool.name" message="The property pool.name must be set before invoking this target. Otherwise there is no pool to use with the jdbc resource."/>
    <fail unless="jdbc.resource.name" message="The property jdbc.resource.name must be set before invoking this target. Otherwise there is no JDBC resource to create."/>
     <exec executable="${asadmin}">
        <arg line="create-jdbc-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --connectionpoolid ${pool.name}" />
        <arg line=" --enabled=true" />
        <arg line=" ${jdbc.resource.name}" />
    </exec>     
  </target>

    <target name="create-connector-connection-pool" depends="tools"
       description="creates connector connection pool">
       <fail unless="connector.pool.name" message="The property connector.pool.name must be set before invoking this target.
       Otherwise there is no pool to use with the connector resource."/>
       <exec executable="${asadmin}">
           <arg line=" create-connector-connection-pool"/>
           <arg line=" --user ${javaee.server.username}" />
           <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
           <arg line=" --host ${javaee.server.name}" />
           <arg line=" --port ${javaee.adminserver.port}" />
           <arg line=" --connectiondefinition ${connectiondefinition.name}" />
           <arg line=" --raname ${ra.name}" />
           <arg line="${optional.attributes}"/>
           <arg line=" ${connector.pool.name} " />
       </exec>
    </target>

     <target name="create-connector-resource"  depends="tools"
       description="creates connector resource">
       <fail unless="connector.pool.name" message="The property connector.pool.name must be set before invoking this target.
       Otherwise there is no pool to use with the connector resource."/>
       <fail unless="connector.resource.name" message="The property connector.resource.name must be set before invoking this target.
       Otherwise there is no Connector resource to create."/>
        <exec executable="${asadmin}">
           <arg line="create-connector-resource"/>
           <arg line=" --user ${javaee.server.username}" />
           <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
           <arg line=" --host ${javaee.server.name}" />
           <arg line=" --port ${javaee.adminserver.port}" />
           <arg line=" --poolname ${connector.pool.name}" />
           <arg line=" --enabled=true" />
           <arg line=" ${connector.resource.name}" />
       </exec>
     </target>

  <target name="create-persistence-resource" depends="tools"
    description="creates persistence resource">
     <exec executable="${asadmin}">
        <arg line="create-persistence-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --factoryclass com.sun.jdo.spi.persistence.support.sqlstore.impl.PersistenceManagerFactoryImpl" />
        <arg line=" --jdbcjndiname ${jdbc.resource.name}" />
        <arg line=" ${pm.resource.name}" />
    </exec>
 </target>

  <target name="create-jms-resource"  depends="tools"
    description="creates jms destination resource">
     <exec executable="${asadmin}">
        <arg line="create-jms-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --restype ${jms.restype}" />
        <arg line=" --enabled=true" />
        <arg line=" --property ${jms.resource.property}" />
        <arg line=" ${jms.resource.name}" />
    </exec>
  </target>

  <target name="create-jms-connection"  depends="tools"
    description="creates jms connection">
     <exec executable="${asadmin}">
        <arg line="create-jms-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --restype ${jms.restype}" />
        <arg line=" --enabled=true" />
        <arg line=" ${jms.resource.name}" />
    </exec>
  </target>

  <target name="create-jms-connection-factory"  depends="tools"
    description="creates jms connection factory">
     <exec executable="${asadmin}">
        <arg line="create-jms-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --restype ${jms.restype}" />
        <arg line=" --enabled=true" />
        <arg line=" ${jms.resource.name}" />
    </exec>
  </target>

  <target name="create-jms-connection-factory-prop"  depends="tools"
    description="creates jms connection factory that allows you to set a property on the connection">
     <exec executable="${asadmin}">
        <arg line="create-jms-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --restype ${jms.restype}" />
        <arg line=" --enabled=true" />
        <arg line=" --property ${jms.resource.property}" />
        <arg line=" ${jms.resource.name}" />
    </exec>
  </target>

  <target name="create-javamail-resource"  depends="tools"
    description="creates javamail resource">
    <property name="mail.transportprotocol" value="smtp"/>
    <property name="mail.transportprotocolclass" value="com.sun.mail.smtp.SMTPTransport"/>
    <property name="mail.storeprotocol" value="imap"/>
    <property name="mail.storeprotocolclass" value="com.sun.mail.imap.IMAPStore"/>
     <exec executable="${asadmin}">
        <arg line="create-javamail-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --transprotocol ${mail.transportprotocol}" />
        <arg line=" --transprotocolclass ${mail.transportprotocolclass}" />
        <arg line=" --storeprotocol ${mail.storeprotocol}" />
        <arg line=" --storeprotocolclass ${mail.storeprotocolclass}" />
        <arg line=" --mailhost ${mail.host}" />
        <arg line=" --mailuser ${mail.username}" />
        <arg line=" --fromaddress ${mail.fromaddress}" />
        <arg line=" ${javamail.resource.name}" />
    </exec>
  </target>

  <target name="delete-javamail-resource"  depends="tools"
    description="deletes javamail resource">
     <exec executable="${asadmin}">
        <arg line="delete-javamail-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" ${javamail.resource.name}" />
    </exec>
  </target>

  <target name="listJmsDestinations" description="lists jms destinations" depends="tools">
     <exec executable="${asadmin}">
        <arg line="list-jmsdest"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
    </exec>
  </target>

  <target name="delete-persistence-resource"
    description="deletes persistence resource" depends="tools">
     <exec executable="${asadmin}">
        <arg line="delete-persistence-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
       <arg line=" ${pm.resource.name}" />
    </exec>
  </target>

  <target name="delete-jdbc-resource"
    description="deletes jdbc resource" depends="tools">
    <fail unless="jdbc.resource.name" message="The property jdbc.resource.name must be set before invoking this target. Otherwise there is no JDBC resource to delete."/>
     <exec executable="${asadmin}">
        <arg line="delete-jdbc-resource"/>
       <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line="${jdbc.resource.name}" />
    </exec>
  </target>

  <target name="delete-jdbc-connection-pool"
    description="deletes jdbc connection pool" depends="tools">
    <fail unless="pool.name" message="The property pool.name must be set before invoking this target. Otherwise there is no JDBC pool to delete."/>
     <exec executable="${asadmin}">
        <arg line="delete-jdbc-connection-pool"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line="${pool.name}" />
    </exec>
  </target>

    <target name="delete-connector-resource"
      description="deletes connector resource" depends="tools">
      <fail unless="connector.resource.name" message="The property connector.resource.name must be set before invoking this target.
      Otherwise there is no connector resource to delete."/>
       <exec executable="${asadmin}">
          <arg line="delete-connector-resource"/>
         <arg line=" --user ${javaee.server.username}" />
          <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
          <arg line=" --host ${javaee.server.name}" />
          <arg line=" --port ${javaee.adminserver.port}" />
          <arg line="${connector.resource.name}" />
      </exec>
    </target>

    <target name="delete-connector-connection-pool"
      description="deletes connector connection pool" depends="tools">
      <fail unless="connector.pool.name" message="The property connector.pool.name must be set before invoking this target. 
      Otherwise there is no connector pool to delete."/>
       <exec executable="${asadmin}">
          <arg line="delete-connector-connection-pool"/>
          <arg line=" --user ${javaee.server.username}" />
          <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
          <arg line=" --host ${javaee.server.name}" />
          <arg line=" --port ${javaee.adminserver.port}" />
          <arg line="${connector.pool.name}" />
      </exec>
    </target>

  <target name="delete-jms-resource"
    description="deletes jms resource" depends="tools">
     <exec executable="${asadmin}">
        <arg line="delete-jms-resource"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" ${jms.resource.name}" />
    </exec>
  </target>

  <target name="undeploy" depends="tools"
    description="undeploys the application">
    <echo message="Undeploying ${module.name}." />
    <exec executable="${asadmin}">
        <arg line="undeploy"/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" ${module.name} " />
    </exec> 
  </target>


  <!-- The deployment process is stop the build if there is an error
       in the deployment process. To change this behavior define the
       property failonerror to be false. -->
  <property name="run.uri" value="${module.name}"/>
  <target name="deploy" depends="tools,-pre-deploy"
    description="deploys the application">
    <fail unless="app.module" message="app.module must be set before invoking this target. Otherwise there is no application to deploy."/>
    <fail unless="module.name" message="app.name must be set before invoking this target. Otherwise there is no application to deploy."/>
    <condition property="app.url" value="http://${javaee.server.name}:${javaee.server.port}/${run.uri}">
      <not>
        <isset property="app.endpointuri"/>
      </not>
    </condition>
    <property name="failonerror" value="true"/>
    <exec executable="${asadmin}" failonerror="${failonerror}">
        <arg line=" deploy "/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --name ${module.name}"/>
        <arg line=" --force=true "/>
        <arg line=" --upload=true "/>
        <arg line=" --dbvendorname ${db.vendorname}"/>
        <arg line="${app.module}" />
    </exec>
    <antcall target="deploy-url-message"/>
  </target>
  
  <target name="deploy-v2" depends="tools,-pre-deploy"
    description="deploys the application">
    <echo message="v2 compatibility deployment..."/>
    <fail unless="app.module" message="app.module must be set before invoking this target. Otherwise there is no application to deploy."/>
    <fail unless="module.name" message="app.name must be set before invoking this target. Otherwise there is no application to deploy."/>
    <condition property="app.url" value="http://${javaee.server.name}:${javaee.server.port}/${run.uri}">
      <not>
        <isset property="app.endpointuri"/>
      </not>
    </condition>
    <property name="failonerror" value="true"/>
    <exec executable="${asadmin}" failonerror="${failonerror}">
        <arg line=" deploy "/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --name ${module.name}"/>
        <arg line=" --force=true "/>
        <arg line=" --upload=true "/>
        <arg line=" --dbvendorname ${db.vendorname}"/>
        <arg line=" --property compatibility=v2"/>
        <arg line="${app.module}" />
    </exec>
    <antcall target="deploy-url-message"/>
  </target>

  <target name="deploy-url-message" if="app.url">
   <echo message="Application Deployed at: ${app.url}"/>
  </target>

  <target name="client-jar" depends="tools">
    <exec executable="${asadmin}" failonerror="${failonerror}">
        <arg line=" get-client-stubs "/>
        <arg line=" --user ${javaee.server.username}" />
        <arg line=" --passwordfile '${javaee.server.passwordfile}'" />
        <arg line=" --host ${javaee.server.name}" />
        <arg line=" --port ${javaee.adminserver.port}" />
        <arg line=" --appname ${module.name}"/>
        <arg line="${client.jar.dir}" />
    </exec>
    <copy
        file="./client-jar/${module.name}Client.jar"
        tofile="client-jar/appClient.jar"
        failonerror="false">
    </copy>
  </target>
    
  <target name="check" description="verify the build setup which is common for all modules">
    <fail unless="javaee.home">
      Property javaee.home not specified.  
      Please specify the javaee.home property in 'bp-project/build.properties'.
    </fail>
    
    <fail unless="javaee.server.passwordfile">
      Property javaee.server.passwordfile not specified. Please
      specify the javaee.server.passwordfile property in 'bp-project/build.properties'. 
      You will also need to ensure that the passwordfile is present and contains
      AS_ADMIN_PASSWORD. 
    </fail>    
  </target>

  <!-- Dummy placeholder targets. They can be overridden by application build file -->
  <target name="-pre-deploy"/>
  
</project>
